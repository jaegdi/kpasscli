name: Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.23.3"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev

      - name: Build
        run: |
          go mod tidy
          go build -v -o dist

      - name: Run tests
        run: go test -v ./...

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/kpasscli
          asset_name: kpasscli
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}

  build-ubi8:
    runs-on: ubuntu-latest

    container:
      image: registry.access.redhat.com/ubi8/ubi:latest

    steps:
      - name: Install dependencies
        run: |
          dnf -y install yum-utils
          dnf -y install dnf-plugins-core
          dnf -y config-manager --set-enabled ubi-8-codeready-builder
          dnf -y update
          dnf -y install glibc glibc-common glibc-devel glibc-headers libstdc++ libstdc++-devel libX11-devel
          dnf -y install gcc gcc-c++ make
          # dnf -y install rpmdevtools

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: jaegdi/kpasscli
          token: ${{ secrets.RELEASE_BUILD }}
          ssh-strict: true
          persist-credentials: true
          clean: true
          fetch-depth: 1
          lfs: false
          submodules: false
          set-safe-directory: true

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.23.7"

      - name: Build
        run: go build -v -o dist/kpasscli

      - name: Run tests
        run: go test -v ./...

      # - name: Create RPM package
      #   run: |
      #     mkdir -p ~/rpmbuild/{SPECS,SOURCES}
      #     cp dist/kpasscli ~/rpmbuild/SOURCES/
      #     cat > ~/rpmbuild/SPECS/kpasscli.spec << EOF
      #     Name: kpasscli
      #     Version: 1.0.0
      #     Release: 1%{?dist}
      #     Summary: KeePass CLI tool
      #     License: MIT
      #     Source0: kpasscli

      #     %description
      #     Command line interface for KeePass

      #     %install
      #     mkdir -p %{buildroot}/usr/bin
      #     cp %{SOURCE0} %{buildroot}/usr/bin/kpasscli

      #     %files
      #     /usr/bin/kpasscli
      #     EOF
      #     rpmbuild -ba ~/rpmbuild/SPECS/kpasscli.spec

      - name: Create DEB package
        run: |
          mkdir -p kpasscli_1.0.0-1/DEBIAN
          mkdir -p kpasscli_1.0.0-1/usr/bin
          cp dist/kpasscli kpasscli_1.0.0-1/usr/bin/
          cat > kpasscli_1.0.0-1/DEBIAN/control << EOF
          Package: kpasscli
          Version: 1.0.0-1
          Architecture: amd64
          Maintainer: maintainer@example.com
          Description: KeePass CLI tool
           Command line interface for KeePass
          EOF
          dpkg-deb --build kpasscli_1.0.0-1

      - name: Create binary tarball
        run: |
          mkdir -p kpasscli-1.0.0
          cp dist/kpasscli kpasscli-1.0.0/
          tar czf kpasscli-1.0.0-linux-amd64.tar.gz kpasscli-1.0.0/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }} ubi8
          draft: false
          prerelease: false

      # - name: Upload RPM Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ~/rpmbuild/RPMS/x86_64/kpasscli-1.0.0-1.el8.x86_64.rpm
      #     asset_name: kpasscli-1.0.0-1.el8.x86_64.rpm
      #     asset_content_type: application/x-rpm

      - name: Upload DEB Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kpasscli_1.0.0-1.deb
          asset_name: kpasscli_1.0.0-1.deb
          asset_content_type: application/x-deb

      - name: Upload Binary Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kpasscli-1.0.0-linux-amd64.tar.gz
          asset_name: kpasscli-1.0.0-linux-amd64.tar.gz
          asset_content_type: application/gzip

  build-ubi7:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build kpasscli binary in Docker
        run: |
          docker run --rm -v $(pwd):/src -w /src registry.access.redhat.com/ubi7/ubi:latest /bin/bash -c "
          yum -y install go gcc glibc-static && \
          go build -o kpasscli
          "

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: kpasscli
          path: ./kpasscli

  build-mac-m1:
    runs-on: macos-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.23.3"

      - name: Build
        run: go build -v -o dist/kpasscli-mac-m1

      # - name: Run tests
      #   run: go test -v ./...

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }} mac-m1
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BUILD }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/kpasscli-mac-m1
          asset_name: kpasscli-mac-m1
          asset_content_type: application/octet-stream
